<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="jsAddDataToLayoutGridMessage" xml:space="preserve">
    <value>Parece que este campo existe atualmente nesse layout. Você quer continuar?</value>
  </data>
  <data name="jsAscending" xml:space="preserve">
    <value>Crescente</value>
  </data>
  <data name="jsConditionDlgHeight" xml:space="preserve">
    <value>"250px"</value>
  </data>
  <data name="jsConditionDlgWidth" xml:space="preserve">
    <value>"495px"</value>
  </data>
  <data name="jsConfirmDeleteMessage" xml:space="preserve">
    <value>Tem certeza que deseja excluir o grupo atual?</value>
  </data>
  <data name="jsCreateLocalJoinMessage" xml:space="preserve">
    <value>Primeiro você deve selecionar uma tabela e campo.</value>
  </data>
  <data name="jsDescending" xml:space="preserve">
    <value>Descendente</value>
  </data>
  <data name="jsInvalidConditionStringMessage" xml:space="preserve">
    <value>Erro: Condição inválida -</value>
  </data>
  <data name="jsInvalidLayoutConditionStringMessage" xml:space="preserve">
    <value>Error: Layout inválido -</value>
  </data>
  <data name="jsInvalidSortStringMessage" xml:space="preserve">
    <value>Error: Tipo Inválido -</value>
  </data>
  <data name="jsLayoutDlgHeight" xml:space="preserve">
    <value>"225px"</value>
  </data>
  <data name="jsLayoutDlgWidth" xml:space="preserve">
    <value>"360px"</value>
  </data>
  <data name="jsNewQuery" xml:space="preserve">
    <value>Nova Consulta</value>
  </data>
  <data name="localizeAndOr.Text" xml:space="preserve">
    <value>E/Ou</value>
  </data>
  <data name="localizeAssignCondition.Text" xml:space="preserve">
    <value>Atribuir Condição</value>
  </data>
  <data name="localizeAssignQueryLayout.Text" xml:space="preserve">
    <value>Atribuir Layout da Consulta</value>
  </data>
  <data name="localizeCalc.Text" xml:space="preserve">
    <value>Cálculos...</value>
  </data>
  <data name="localizeCancel.Text" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="localizeCaseSens.Text" xml:space="preserve">
    <value>Diferencia Maiús/Minús.</value>
  </data>
  <data name="localizeConditionInstructions.Text" xml:space="preserve">
    <value>Dê um duplo clique em um campo da lista acima e ele													aparecerá no grid abaixo para ser usado como uma condição para selecionar registros.
														As condições são aplicadas na ordem em que aparecem no grid. Use os botões Para Cima
														e Para Baixo para mudar a ordem.</value>
  </data>
  <data name="localizeConditions.Text" xml:space="preserve">
    <value>Condições</value>
  </data>
  <data name="localizeCreateLocalJoin.Text" xml:space="preserve">
    <value>Criar Relação Local (local join)</value>
  </data>
  <data name="localizeDefaults.Text" xml:space="preserve">
    <value>Padrões</value>
  </data>
  <data name="localizeDelete.Text" xml:space="preserve">
    <value>Excluir</value>
  </data>
  <data name="localizeDescription.Text" xml:space="preserve">
    <value>Descrição</value>
  </data>
  <data name="localizeDisplayName.Text" xml:space="preserve">
    <value>Exibir Nome:</value>
  </data>
  <data name="localizeEdit.Text" xml:space="preserve">
    <value>Editar</value>
  </data>
  <data name="localizeField.Text" xml:space="preserve">
    <value>Campo</value>
  </data>
  <data name="localizeGlobalJoins.Text" xml:space="preserve">
    <value>Relações Globais…</value>
  </data>
  <data name="localizeGrdSortsDirection.Text" xml:space="preserve">
    <value>Direção</value>
  </data>
  <data name="localizeGrdSortsOrder.Text" xml:space="preserve">
    <value>Ordem</value>
  </data>
  <data name="localizeGrdSortsSortBy.Text" xml:space="preserve">
    <value>Ordenar por</value>
  </data>
  <data name="localizeHelp.Text" xml:space="preserve">
    <value>Ajuda</value>
  </data>
  <data name="localizeHideHiddenFields.Text" xml:space="preserve">
    <value>Ocultar Campos Escondidos</value>
  </data>
  <data name="localizeLayout.Text" xml:space="preserve">
    <value>Layout</value>
  </data>
  <data name="localizeLayoutInstructions.Text" xml:space="preserve">
    <value>Clique duas vezes em um campo da visão acima para colocá-lo no
														grid abaixo. Use os botões Esquerda e Direita para mudar a ordem dos
														campos na grid.</value>
  </data>
  <data name="localizeMoveDown.Text" xml:space="preserve">
    <value>Mover Abaixo</value>
  </data>
  <data name="localizeMoveUp.Text" xml:space="preserve">
    <value>Mover Acima</value>
  </data>
  <data name="localizeName.Text" xml:space="preserve">
    <value>Nome:</value>
  </data>
  <data name="localizeNot.Text" xml:space="preserve">
    <value>Não</value>
  </data>
  <data name="localizeOK.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="localizeOperator.Text" xml:space="preserve">
    <value>Operador</value>
  </data>
  <data name="localizeProperties.Text" xml:space="preserve">
    <value>Propriedades</value>
  </data>
  <data name="localizeReturnDistinct.Text" xml:space="preserve">
    <value>Retornar Somente Linhas Distintas</value>
  </data>
  <data name="localizeSorting.Text" xml:space="preserve">
    <value>Ordenando</value>
  </data>
  <data name="localizeSortInstructions.Text" xml:space="preserve">
    <value>Clique duas vezes em um campo da visão acima para colocá-lo no
														grid abaixo e usa-lo para classificar os dados retornados. Os dados são classificados
														na ordem dos campos no grid. Use os botões Para Cima e Para Baixo
														para mudar a ordem.</value>
  </data>
  <data name="localizeValue.Text" xml:space="preserve">
    <value>Valor</value>
  </data>
  <data name="localizeViewSQL.Text" xml:space="preserve">
    <value>Visualizar SQL</value>
  </data>
  <data name="MoveDown" xml:space="preserve">
    <value>Mover Abaixo</value>
  </data>
  <data name="MoveLeft" xml:space="preserve">
    <value>Mover Esquerda</value>
  </data>
  <data name="MoveRight" xml:space="preserve">
    <value>Mover Direita</value>
  </data>
  <data name="MoveUp" xml:space="preserve">
    <value>Mover Acima</value>
  </data>
</root>