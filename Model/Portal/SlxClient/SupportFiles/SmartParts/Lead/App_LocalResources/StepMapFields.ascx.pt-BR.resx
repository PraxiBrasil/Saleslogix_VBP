<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cboTemplates.Caption" xml:space="preserve">
    <value>Campo Modelo de Mapa:</value>
  </data>
  <data name="cboTemplates.None.Item" xml:space="preserve">
    <value>&lt;Nenhum&gt;</value>
  </data>
  <data name="chkShowAllTargets.Caption" xml:space="preserve">
    <value>Exibir Todos os Campos</value>
  </data>
  <data name="cmdMatch.Caption" xml:space="preserve">
    <value>Buscar</value>
  </data>
  <data name="cmdSave.Caption" xml:space="preserve">
    <value>Salvar Mod. Importação</value>
  </data>
  <data name="cmdSave.ToolTip" xml:space="preserve">
    <value>Salvar Mod. Importação</value>
  </data>
  <data name="cmdSaveAs.Caption" xml:space="preserve">
    <value>Salvar como modelo Importação</value>
  </data>
  <data name="cmdSaveAs.ToolTip" xml:space="preserve">
    <value>Salvar como modelo Importação</value>
  </data>
  <data name="cmdUnmatch.Caption" xml:space="preserve">
    <value>Não Coinc. &gt;</value>
  </data>
  <data name="error_ImportManager_NotFound" xml:space="preserve">
    <value>Nenhuma instância do gerenciador de importação foi encontrada. O processo de importação não pode continuar.</value>
  </data>
  <data name="error_NoMappingsDefined" xml:space="preserve">
    <value>Atualmente, você não tem nenhum mapeamento definido. Por favor, defina o seu mapeamento e tente novamente.</value>
  </data>
  <data name="error_NoSourceSelected" xml:space="preserve">
    <value>Para remover um mapeamento você deverá selecionar uma linha na lista da "fonte".</value>
  </data>
  <data name="error_NoSourceTargetSelected" xml:space="preserve">
    <value>A fim de criar um mapeamento você deverá selecionar uma linha com os 'destinos' e a 'fonte' de ambas as listas.</value>
  </data>
  <data name="error_templateManager" xml:space="preserve">
    <value>Ocorreu um erro durante a criação do gerenciador de modelos.</value>
  </data>
  <data name="grdHistoryItems.Description.ColumnHeading" xml:space="preserve">
    <value>Descrição</value>
  </data>
  <data name="grdHistoryItems.EmptyTableRowText" xml:space="preserve">
    <value>Não houve erros durante o processo de importação.</value>
  </data>
  <data name="grdHistoryItems.Record.ColumnHeading" xml:space="preserve">
    <value>Registro</value>
  </data>
  <data name="grdHistoryItems.RecordNumber.ColumnHeading" xml:space="preserve">
    <value>Número Registro</value>
  </data>
  <data name="grdHistoryItems.TimeStamp.ColumnHeading" xml:space="preserve">
    <value>Tempo de selo</value>
  </data>
  <data name="grdHistoryItems.Type.ColumnHeading" xml:space="preserve">
    <value>Tipo</value>
  </data>
  <data name="grdSource.ColumnNumber.ColumnHeading" xml:space="preserve">
    <value>Coluna #</value>
  </data>
  <data name="grdSource.EmptyTableRowText" xml:space="preserve">
    <value>Não existem registos que correspondem aos critérios de seleção.</value>
  </data>
  <data name="grdSource.ListField.ColumnHeading" xml:space="preserve">
    <value>Campo no arquivo</value>
  </data>
  <data name="grdSource.SLXField.ColumnHeading" xml:space="preserve">
    <value>Coincidir Campo SalesLogix</value>
  </data>
  <data name="grdTarget.EmptyTableRowText" xml:space="preserve">
    <value>Não existem registos que correspondem aos critérios de seleção.</value>
  </data>
  <data name="grdTarget.SLXField.ColumnHeading" xml:space="preserve">
    <value>Campo SalesLogix</value>
  </data>
  <data name="lblCompleteDate.Caption" xml:space="preserve">
    <value>Data de Conclusão:</value>
  </data>
  <data name="lblHeader.Caption" xml:space="preserve">
    <value>Selecione um modelo existente ou selecione os campos que você deseja mapear.</value>
  </data>
  <data name="lblMatches.Caption" xml:space="preserve">
    <value>{0} de {1} campos são encontrados</value>
  </data>
  <data name="lblTemplates.Caption" xml:space="preserve">
    <value>Campo Modelo de Mapa:</value>
  </data>
</root>